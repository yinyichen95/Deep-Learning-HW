import sys
import tensorflow as tf
import numpy as np
from keras.datasets import cifar10
import os
import cv2
import matplotlib.pyplot as plt
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

# Define class name for Cifar10 dataset
cifar10_ClassName = ['plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']



class linearClassifier (object):
    def __init__ (self, isTrain=1):
    
        def weight_variable(shape):
            initial = tf.truncated_normal(shape, stddev=0.1)
            return tf.Variable(initial)

        def bias_variable(shape):
            initial = tf.constant(0.1, shape=shape)
            return tf.Variable(initial)

        def conv2d(a, w):
            return tf.nn.conv2d(a, w, strides=[1, 1, 1, 1], padding='SAME')

        def max_pool_2x2(a):
            return tf.nn.max_pool(a, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding="SAME")
            
        self.x = tf.placeholder(name="x", shape=[None, 32, 32, 3], dtype=tf.float32)
        self.y = tf.placeholder(name="y", shape=[None], dtype=tf.int64)

        self.keep_pro = tf.placeholder(tf.float32)
        #x_image = tf.reshape(self.x, [-1, 32, 32, 3])
        
        # conv1
        w_conv1 = weight_variable([5, 5, 3, 32])
        b_conv1 = bias_variable([32])
        self.h_conv1 = tf.nn.relu(conv2d(self.x, w_conv1) + b_conv1)
        h_pool1 = max_pool_2x2(self.h_conv1)
        
        #conv2
        w_conv2 = weight_variable([3, 3, 32, 64])
        b_conv2 = bias_variable([64])
        h_conv2 = tf.nn.relu(conv2d(h_pool1, w_conv2) + b_conv2)
        h_pool2 = max_pool_2x2(h_conv2)
        
        #conv3
        w_conv3 = weight_variable([3, 3, 64, 128])
        b_conv3 = bias_variable([128])
        h_conv3 = tf.nn.relu(conv2d(h_pool2, w_conv3) + b_conv3)
        h_pool3 = max_pool_2x2(h_conv3)
       
        #fc1
        w_fc1 = weight_variable([4 * 4 * 128, 1024])
        b_fc1 = bias_variable([1024])
        h_pool3_flat = tf.reshape(h_pool3, [-1, 4 * 4 * 128])
        h_fc1 = tf.nn.relu(tf.matmul(h_pool3_flat, w_fc1) + b_fc1)
        h_fc1_drop = tf.nn.dropout(h_fc1, 0.7)

        #fc2
        w_fc2 = weight_variable([1024, 10])
        b_fc2 = bias_variable([10])
        
        yOut = tf.nn.softmax(tf.matmul(h_fc1_drop, w_fc2) + b_fc2)
       # yOut = tf.nn.softmax(tf.matmul(h_fc1, w_fc2) + b_fc2)

        
        # Loss(zhengzexiang)
        totalLoss = tf.losses.hinge_loss(tf.one_hot(self.y, 10), logits=yOut)
        self.meanLoss = tf.reduce_mean(totalLoss) + 1e-4*tf.nn.l2_loss(w_conv1) + 1e-4*tf.nn.l2_loss(w_conv2) + 1e-4*tf.nn.l2_loss(w_fc1)+1e-4*tf.nn.l2_loss(w_conv3)+ 1e-4*tf.nn.l2_loss(w_fc2)

        # Optimizer
        optimizer = tf.train.AdamOptimizer(1e-4)
        self.trainStep = optimizer.minimize(self.meanLoss)

        # Correct Prediction and accuracy
        correctPrediction = tf.equal(tf.argmax(yOut, 1), self.y)
        self.accuracy = tf.reduce_mean(tf.cast(correctPrediction, tf.float32))

        # Predict index
        self.predict = tf.argmax(yOut, 1)

        # Initialize session
        tfConfig = tf.ConfigProto(allow_soft_placement=True)
        tfConfig.gpu_options.allow_growth = True
        self.sess = tf.Session(config=tfConfig)
        self.sess.run(tf.global_variables_initializer())
        self.saver = tf.train.Saver(max_to_keep=None)

        # Log directory
        if isTrain == 1:
            if tf.gfile.Exists('./model'):
                tf.gfile.DeleteRecursively('./model')
            tf.gfile.MakeDirs('./model')
        else:
            self.saver.restore(self.sess, './model/model.ckpt')


    def train(self, xTr, yTr, xTe, yTe, maxSteps=1000, batchSize=128):
        #keep_pro = tf.placeholder(tf.float32)
        print('{0:>7} {1:>12} {2:>12} {3:>12} {4:>12}'.format('Loop', 'Train Loss', 'Train Acc %', 'Test Loss', 'Test Acc %'))
        for i in range(maxSteps):
            # Shuffle data
            s = np.arange(xTr.shape[0])
            np.random.shuffle(s)
            xTr = xTr[s]
            yTr = yTr[s]

            # Train
            losses = []
            accuracies = []
            for j in range(0, xTr.shape[0], batchSize):
                xBatch = xTr[j:j + batchSize]
                yBatch = yTr[j:j + batchSize]
                trainLoss, trainAccuracy, _ = self.sess.run([self.meanLoss, self.accuracy, self.trainStep], feed_dict={self.x: xBatch, self.y: yBatch})
                losses.append(trainLoss)
                accuracies.append(trainAccuracy)
            avgTrainLoss = sum(losses) / len(losses)
            avgTrainAcc = sum(accuracies) / len(accuracies)

            # Test
            losses = []
            accuracies = []
            for j in range(0, xTe.shape[0], batchSize):
                xBatch = xTe[j:j + batchSize]
                yBatch = yTe[j:j + batchSize]
                testLoss, testAccuracy = self.sess.run([self.meanLoss, self.accuracy], feed_dict={self.x: xBatch, self.y: yBatch})
                losses.append(testLoss)
                accuracies.append(testAccuracy)
            avgTestLoss = sum(losses) / len(losses)
            avgTestAcc = sum(accuracies) / len(accuracies)

            # Log Output
            if i==0 or i==49 or i==99 or i==149 or i==199 or i==249 or i==299 or i==349 or i==399 or i==449 or i==499:
                print('{0:>7} {1:>12.4f} {2:>12.4f} {3:>12.4f} {4:>12.4f}'.format(str(i+1)+"/"+str(maxSteps), avgTrainLoss, avgTrainAcc*100, avgTestLoss, avgTestAcc*100))

        savePath = self.saver.save(self.sess, './model/model.ckpt')
        print('Model saved in file: {0}'.format(savePath))

    def predictOutput(self, inputX):
        c = self.sess.run(self.h_conv1, feed_dict={self.x: inputX})
        fig1, ax1 = plt.subplots(nrows=4, ncols=8, figsize=(4, 8))
        index = 0
        c = np.reshape(c, (32, 1, 32, 32))
        for row in range(0, 4):
            for col in range(0, 8):
                ax1[row][col].imshow(c[index][0], cmap='gray')
                index += 1
                if index == 32:
                    break
        fig1.savefig('CONV_rslt.png')
        plt.show()
        return self.sess.run([self.predict],feed_dict={self.x: inputX})

    def getAcc(self, inputX, inputY):
        return self.sess.run([self.accuracy],feed_dict={self.x: inputX, self.y: inputY})

def readImage(inputImage, meanValue):
    img = cv2.imread(inputImage)
    h_img, w_img, _ = img.shape
    imgResize = cv2.resize(img, (32, 32))
    imgRGB = cv2.cvtColor(imgResize, cv2.COLOR_BGR2RGB)
    imgResizeNp = np.asarray(imgRGB)
    imgResizeNp = np.expand_dims(imgResizeNp, axis=0)
    imgResizeNp = imgResizeNp.astype(np.float)
    imgResizeNp -= meanValue
    #imgResizeNp = np.reshape(imgResizeNp, (imgResizeNp.shape[0], -1))
    return imgResizeNp

def getCifar10():
    (x1, y1), (x2, y2) = cifar10.load_data()

    # Format data
    x1 = x1.astype(np.float)
    x2 = x2.astype(np.float)
    y1 = np.squeeze(y1)
    y2 = np.squeeze(y2)

    # Normalize the data by subtract the mean image
    meanImage = np.mean(x1, axis=0)
    x1 -= meanImage
    x2 -= meanImage

    # Reshape data from channel to rows
    #x1 = np.reshape(x1, (x1.shape[0], -1))
    #x2 = np.reshape(x2, (x2.shape[0], -1))

    return (x1, y1), (x2, y2), meanImage

# Main function
if sys.argv[1] == "train":
    classify = linearClassifier(isTrain=1)
    (xTrain, yTrain), (xTest, yTest), mV = getCifar10()
    classify.train(xTrain, yTrain, xTest, yTest, maxSteps=500)

elif sys.argv[1] == 'test':
    classify = linearClassifier(isTrain=0)
    (xTrain, yTrain), (xTest, yTest), mV = getCifar10()
    print(cifar10_ClassName[np.squeeze(classify.predictOutput(readImage(sys.argv[2], mV)))])
